@inject IRepositorio repositorio

<EditForm Model="auditoria" OnValidSubmit="OnDataAnnonationsValidated">
    <DataAnnotationsValidator />

    <div class="form-group">
        <div class="row">
            <div class="col-md-6">
                <label>Nro de Orden:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@NroDeOrden" />
                    <ValidationMessage For="@(() => auditoria.NroOrden)" />
                </div>
            </div>
            <div class="col-md-6">
                <label>Nro de Pieza:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@NroDePieza" />
                    <ValidationMessage For="@(() => auditoria.NroPieza)" />
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label>Areas:</label>
        <div>
            <SelectorTypeahead Context="Area"
                               SearchMethod="BuscarAreas"
                               ElementosSeleccionados="AreaSeleccionada"
                               ControlName="Area"
                               Placeholder="Nombre del Area">
                <MyListTemplate>
                    @Area.Descripcion
                </MyListTemplate>
                <MyResultTemplate>
                    @Area.Descripcion
                </MyResultTemplate>
            </SelectorTypeahead>
        </div>
    </div>

    <div class="form-group">
        <label>Maquinas:</label>
        <div>
            <SelectorTypeahead Context="Maquina"
                               SearchMethod="BuscarMaquinas"
                               ElementosSeleccionados="MaquinaSeleccionada"
                               ControlName="Maquina"
                               Placeholder="Nro de la Maquina">
                <MyListTemplate>
                    @Maquina.Descripcion
                </MyListTemplate>
                <MyResultTemplate>
                    @Maquina.Descripcion
                </MyResultTemplate>
            </SelectorTypeahead>
        </div>
    </div>

    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                <label>Operario:<small>(Buscar Por Legajo)</small></label>
                <div>
                    <SelectorTypeahead Context="Operario"
                                       SearchMethod="BuscarOperarios"
                                       ElementosSeleccionados="OperarioSeleccionado"
                                       ControlName="Operario"
                                       Placeholder="Buscar Por Legajo">
                        <MyListTemplate>
                            @Operario.Legajo
                        </MyListTemplate>
                        <MyResultTemplate>
                            @Operario.Legajo
                        </MyResultTemplate>
                    </SelectorTypeahead>
                </div>
            </div>
            <div class="col-sm-6">
                <label>Supervisores:<small>(Buscar Por Legajo)</small></label>
                <div>
                    <SelectorTypeahead Context="Supervisor"
                                       SearchMethod="BuscarSupervisores"
                                       ElementosSeleccionados="SupervisorSeleccionado"
                                       ControlName="Supervisor"
                                       Placeholder="Buscar Por Legajo">
                        <MyListTemplate>
                            @Supervisor.Legajo
                        </MyListTemplate>
                        <MyResultTemplate>
                            @Supervisor.Legajo
                        </MyResultTemplate>
                    </SelectorTypeahead>
                </div>
            </div>
        </div>
    </div>

    @foreach (var detalleAuditoria in ListadoDetallesAuditoria)
    {
        <RespuestaPuntoAuditoria detalleAuditoria="detalleAuditoria">
        </RespuestaPuntoAuditoria>
        @*<div class="form-group">
                <label>@punto.Descripcion</label>
                <div>
                    @foreach (var respuesta in ListadoRespuestasDetalleAuditoria)
                    {
                        respuesta.PuntoAuditoriaID = punto.ID;
                        <a class="btn btn-@claseColor" @onclick="@(() => Responder(respuesta))">@respuesta.Descripcion</a>
                    }
                </div>
            </div>*@
    }

    <button type="submit" class="btn btn-success">Guardar</button>
</EditForm>

@code {
    private string claseColor = "light", NroDeOrden = "", NroDePieza = "";
    private bool MostrarScanner = false, LeerNroOrden = false, LeerNroPieza = false;

    [Parameter] public Auditoria auditoria { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    [Parameter] public List<Area> ListadoAreas { get; set; } = new List<Area>();
    [Parameter] public List<Area> AreaSeleccionada { get; set; } = new List<Area>();

    [Parameter] public List<Maquina> ListadoMaquinas { get; set; } = new List<Maquina>();
    [Parameter] public List<Maquina> MaquinaSeleccionada { get; set; } = new List<Maquina>();

    [Parameter] public List<Operario> ListadoSupervisores { get; set; } = new List<Operario>();
    [Parameter] public List<Operario> SupervisorSeleccionado { get; set; } = new List<Operario>();

    [Parameter] public List<Operario> ListadoOperarios { get; set; } = new List<Operario>();
    [Parameter] public List<Operario> OperarioSeleccionado { get; set; } = new List<Operario>();

    [Parameter] public List<PuntoAuditoria> ListadoPuntosAuditoria { get; set; } = new List<PuntoAuditoria>();
    [Parameter] public List<RespuestaDetalleAuditoria> ListadoRespuestasDetalleAuditoria { get; set; } = new List<RespuestaDetalleAuditoria>();

    public List<DetalleAuditoria> ListadoDetallesAuditoria = new List<DetalleAuditoria>();

    protected override void OnInitialized()
    {
        if(auditoria.ID == 0)
        {
            foreach (var punto in ListadoPuntosAuditoria)
            {
                ListadoDetallesAuditoria.Add(new DetalleAuditoria()
                {
                    PuntoAuditoriaID = punto.ID,
                    RespuestaID = 3
                });
            }
        }
        else
        {
            NroDeOrden = auditoria.NroOrden;
            NroDePieza = auditoria.NroPieza;

            AreaSeleccionada.Add(auditoria.Maquina.Area);

            MaquinaSeleccionada.Add(auditoria.Maquina);

            SupervisorSeleccionado.Add(auditoria.Supervisor);

            OperarioSeleccionado.Add(auditoria.Operario);

            ListadoDetallesAuditoria = auditoria.DetallesAuditoria;
        }
    }

    private async Task<IEnumerable<Area>> BuscarAreas(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Area>>($"api/Areas/buscar/{searchText}");
        return responseHttp.Response;
    }

    private async Task<IEnumerable<Maquina>> BuscarMaquinas(string searchText)
    {
        int id = AreaSeleccionada.FirstOrDefault().ID;
        var responseHttp = await repositorio.Get<List<Maquina>>($"api/Maquinas/buscar/{searchText}?Id=" + id);
        return responseHttp.Response;
    }

    private async Task<IEnumerable<Operario>> BuscarSupervisores(string searchText)
    {
        int tipoFiltro = 1;
        var responseHttp = await repositorio.Get<List<Operario>>($"api/Operarios/buscar/{searchText}?tipoFiltro=" + tipoFiltro);
        return responseHttp.Response;
    }

    private async Task<IEnumerable<Operario>> BuscarOperarios(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Operario>>($"api/Operarios/buscar/{searchText}");
        return responseHttp.Response;
    }

    //private void Responder(RespuestaDetalleAuditoria respuestaDetalleAuditoria)
    //{
    //    respuestasAuditoria.Add(new DetalleAuditoria()
    //    {
    //        PuntoAuditoriaID = respuestaDetalleAuditoria.PuntoAuditoriaID,
    //        RespuestaID = respuestaDetalleAuditoria.ID
    //    });
    //    claseColor = respuestaDetalleAuditoria.ClaseHtml;
    //}

    private async Task OnDataAnnonationsValidated()
    {
        auditoria.NroOrden = NroDeOrden;

        auditoria.NroPieza = NroDePieza;

        auditoria.MaquinaID = MaquinaSeleccionada.Select(x => x.ID).FirstOrDefault();

        auditoria.SupervisorID = SupervisorSeleccionado.Select(x => x.ID).FirstOrDefault();

        auditoria.OperarioID = OperarioSeleccionado.Select(x => x.ID).FirstOrDefault();

        DateTime fecha = DateTime.Now;

        auditoria.Fecha = fecha;
        auditoria.Hora = fecha.Hour.ToString().PadLeft(2, '0') + ":" + fecha.Minute.ToString().PadLeft(2, '0');
        auditoria.Mes = fecha.Month;
        auditoria.Anio = fecha.Year;

        auditoria.DetallesAuditoria = ListadoDetallesAuditoria;

        await OnValidSubmit.InvokeAsync(null);
    }
}
