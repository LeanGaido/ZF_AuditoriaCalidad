@inject IRepositorio repositorio

<EditForm Model="auditoria">
    <DataAnnotationsValidator />

    <Confirmacion MostrarConfirmacion="MostrarErrores"
                  Titulo="@TituloErrores"
                  onCancel="CerrarErrores"
                  onConfirm="CerrarErrores"
                  TextoBotonConfirmar="Revisar">
        <ChildContent>
            @if (mensajesError.Count > 0)
            {
                <ul class="list-group">
                    @foreach (var error in mensajesError)
                    {
                        <li class="list-group-item list-group-item-danger"><b>@error</b></li>
                    }
                </ul>
            }
        </ChildContent>
    </Confirmacion>

    <div class="form-group">
        <div class="row">
            <div class="col-md-6">
                <label>Nro de Orden:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@NroDeOrden" />
                    <ValidationMessage For="@(() => auditoria.NroOrden)" />
                </div>
            </div>
            <div class="col-md-6">
                <label>Nro de Pieza:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@NroDePieza" />
                    <ValidationMessage For="@(() => auditoria.NroPieza)" />
                </div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label>Areas:</label>
        <div>
            @*<SelectorTypeahead Context="Area"
                               SearchMethod="BuscarAreas"
                               ElementosSeleccionados="AreaSeleccionada"
                               ControlName="Area"
                               Placeholder="Seleccione un Area">
                <MyListTemplate>
                    @Area.Descripcion
                </MyListTemplate>
                <MyResultTemplate>
                    @Area.Descripcion
                </MyResultTemplate>
            </SelectorTypeahead>*@
            <select class="form-control" value="@AreaID" @onchange="ActualizarProcesos">
                <option value="0">--Seleccione una Area--</option>
                @foreach (var item in ListadoAreas)
                {
                    <option value="@item.ID">@item.Descripcion</option>
                }
            </select>
        </div>
    </div>

    <div class="form-group">
        <label>Procesos:</label>
        <div>
            @*<SelectorTypeahead Context="Proceso"
                               SearchMethod="BuscarProcesos"
                               ElementosSeleccionados="ProcesoSeleccionado"
                               ControlName="Proceso"
                               Placeholder="Seleccione un Proceso">
                <MyListTemplate>
                    @Proceso.Descripcion
                </MyListTemplate>
                <MyResultTemplate>
                    @Proceso.Descripcion
                </MyResultTemplate>
            </SelectorTypeahead>*@
            <select class="form-control" @bind="@ProcesoID">
                <option value="0">--Seleccione un Proceso--</option>
                @foreach (var item in ListadoProcesos)
                {
                    <option value="@item.ID">@item.Descripcion</option>
                }
            </select>
        </div>
    </div>

    <div class="form-group">
        <label>Maquinas:</label>
        <div>
            <SelectorTypeahead Context="Maquina"
                               SearchMethod="BuscarMaquinas"
                               ElementosSeleccionados="MaquinaSeleccionada"
                               ControlName="Maquina"
                               Placeholder="Seleccione una Maquina">
                <MyListTemplate>
                    <div class="col-sm-12 col-md-8">@Maquina.Descripcion - <span class="text-info">@Maquina.CantDeVecesAuditada</span></div>
                </MyListTemplate>
                <MyResultTemplate>
                    @Maquina.Descripcion
                </MyResultTemplate>
            </SelectorTypeahead>
        </div>
    </div>

    <div class="form-group">
        <div class="row">
            <div class="col-sm-6">
                <label>Operario:<small>(Buscar Por Legajo)</small></label>
                <div>
                    <SelectorTypeahead Context="Operario"
                                       SearchMethod="BuscarOperarios"
                                       ElementosSeleccionados="OperarioSeleccionado"
                                       ControlName="Operario"
                                       Placeholder="Buscar Por Legajo">
                        <MyListTemplate>
                            @Operario.Legajo - @Operario.ApellidoYNombre
                        </MyListTemplate>
                        <MyResultTemplate>
                            @Operario.Legajo - @Operario.ApellidoYNombre
                        </MyResultTemplate>
                    </SelectorTypeahead>
                </div>
            </div>
            <div class="col-sm-6">
                <label>Supervisores:<small>(Buscar Por Legajo)</small></label>
                <div>
                    <SelectorTypeahead Context="Supervisor"
                                       SearchMethod="BuscarSupervisores"
                                       ElementosSeleccionados="SupervisorSeleccionado"
                                       ControlName="Supervisor"
                                       Placeholder="Buscar Por Legajo">
                        <MyListTemplate>
                            @Supervisor.Legajo - @Supervisor.ApellidoYNombre
                        </MyListTemplate>
                        <MyResultTemplate>
                            @Supervisor.Legajo - @Supervisor.ApellidoYNombre
                        </MyResultTemplate>
                    </SelectorTypeahead>
                </div>
            </div>
        </div>
    </div>

    @foreach (var detalleAuditoria in ListadoDetallesAuditoria)
    {
        <RespuestaPuntoAuditoria detalleAuditoria="detalleAuditoria"
                                 PuedeObservar="PuedeObservar"
                                 PuedeResponder="PuedeResponder">
        </RespuestaPuntoAuditoria>
    }
    <a @onclick="@(() => GuardarAuditoria())" class="btn btn-success">Guardar</a>
</EditForm>

<Confirmacion MostrarConfirmacion="Mostrar"
              Titulo="@Titulo"
              onCancel="CerrarConfirmacion"
              onConfirm="OnDataAnnonationsValidated">
    <ChildContent>
        <div class="form-group">
            <div class="row">
                <div class="col-md-6">
                    <label>Nro de Orden:</label>
                    <div>
                        <input readonly class="form-control" value="@NroDeOrden" />
                    </div>
                </div>
                <div class="col-md-6">
                    <label>Nro de Pieza:</label>
                    <div>
                        <input readonly class="form-control" value="@NroDePieza" />
                    </div>
                </div>
            </div>
        </div>

        @*<div class="form-group">
            <label>Areas:</label>
            <div>
                <input readonly class="form-control" value="@AreaSeleccionada.First().Descripcion" />
            </div>
        </div>

        <div class="form-group">
            <label>Areas:</label>
            <div>
                <input readonly class="form-control" value="@ProcesoSeleccionado.First().Descripcion" />
            </div>
        </div>*@

        <div class="form-group">
            <label>Maquinas:</label>
            <div>
                <input readonly class="form-control" value="@MaquinaSeleccionada.First().Descripcion" />
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-sm-6">
                    <label>Operario:</label>
                    <div>
                        <input readonly class="form-control" value="@OperarioSeleccionado.First().ApellidoYNombre" />
                    </div>
                </div>
                <div class="col-sm-6">
                    <label>Supervisores:</label>
                    <div>
                        <input readonly class="form-control" value="@SupervisorSeleccionado.First().ApellidoYNombre" />
                    </div>
                </div>
            </div>
        </div>

        @foreach (var detalleAuditoria in ListadoDetallesAuditoria)
        {
            <RespuestaPuntoAuditoria detalleAuditoria="detalleAuditoria"
                                     PuedeObservar="false"
                                     PuedeResponder="false">
            </RespuestaPuntoAuditoria>
        }
    </ChildContent>
</Confirmacion>

@code {
    private string claseColor = "light", NroDeOrden = "", NroDePieza = "";
    //private bool MostrarScanner = false, LeerNroOrden = false, LeerNroPieza = false;

    private bool Mostrar = false,  MostrarErrores = false;
    private string Titulo = "", TituloErrores = "";
    public int? AreaID = 0;
    public int? ProcesoID = 0;

    [Parameter] public Auditoria auditoria { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    [Parameter] public List<Area> ListadoAreas { get; set; } = new List<Area>();
    [Parameter] public List<Area> AreaSeleccionada { get; set; } = new List<Area>();

    [Parameter] public List<Proceso> ListadoProcesos { get; set; } = new List<Proceso>();
    [Parameter] public List<Proceso> ProcesoSeleccionado { get; set; } = new List<Proceso>();

    [Parameter] public List<Maquina> ListadoMaquinas { get; set; } = new List<Maquina>();
    [Parameter] public List<Maquina> MaquinaSeleccionada { get; set; } = new List<Maquina>();

    [Parameter] public List<Operario> ListadoSupervisores { get; set; } = new List<Operario>();
    [Parameter] public List<Operario> SupervisorSeleccionado { get; set; } = new List<Operario>();

    [Parameter] public List<Operario> ListadoOperarios { get; set; } = new List<Operario>();
    [Parameter] public List<Operario> OperarioSeleccionado { get; set; } = new List<Operario>();

    [Parameter] public List<PuntoAuditoria> ListadoPuntosAuditoria { get; set; } = new List<PuntoAuditoria>();
    [Parameter] public List<RespuestaDetalleAuditoria> ListadoRespuestasDetalleAuditoria { get; set; } = new List<RespuestaDetalleAuditoria>();

    [Parameter] public bool PuedeObservar { get; set; } = true;
    [Parameter] public bool PuedeResponder { get; set; } = true;

    public List<DetalleAuditoria> ListadoDetallesAuditoria = new List<DetalleAuditoria>();
    public List<string> mensajesError = new List<string>();

    protected override void OnInitialized()
    {
        if (auditoria.ID == 0)
        {
            foreach (var punto in ListadoPuntosAuditoria)
            {
                ListadoDetallesAuditoria.Add(new DetalleAuditoria()
                {
                    PuntoAuditoriaID = punto.ID,
                    PuntoAuditoria = punto,
                    RespuestaID = 3
                });
            }
        }
        else
        {
            NroDeOrden = auditoria.NroOrden;
            NroDePieza = auditoria.NroPieza;

            MaquinaSeleccionada.Add(auditoria.Maquina);

            ProcesoSeleccionado.Add(auditoria.Maquina.Proceso);

            AreaSeleccionada.Add(auditoria.Maquina.Proceso.Area);

            SupervisorSeleccionado.Add(auditoria.Supervisor);

            OperarioSeleccionado.Add(auditoria.Operario);

            ListadoDetallesAuditoria = auditoria.DetallesAuditoria;
        }
    }

    private async Task<IEnumerable<Area>> BuscarAreas(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Area>>($"api/Areas/buscar/{searchText}");
        return responseHttp.Response;
    }

    private async Task ActualizarProcesos(ChangeEventArgs countryEvent)
    {
        AreaID = int.Parse(countryEvent.Value.ToString());
        var responseHttpProcesos = await repositorio.Get<List<Proceso>>($"api/Procesos/{AreaID.Value}");
        ListadoProcesos = responseHttpProcesos.Response;
        ProcesoID = 0;
        //ProcesoID = (ListadoProcesos.FirstOrDefault() != null) ? ListadoProcesos.First().ID : 0;
    }

    private async Task<IEnumerable<Maquina>> BuscarProcesos(string searchText)
    {
        int id = AreaSeleccionada.FirstOrDefault().ID;
        var responseHttp = await repositorio.Get<List<Maquina>>($"api/Procesos/buscar/{searchText}?Id=" + id);

        return responseHttp.Response;
    }

    private async Task<IEnumerable<Maquina>> BuscarMaquinas(string searchText)
    {
        int id = ProcesoID.Value;
        var responseHttp = await repositorio.Get<List<Maquina>>($"api/Maquinas/buscar/{searchText}?Id=" + id);

        return responseHttp.Response;
    }

    private async Task<IEnumerable<Operario>> BuscarSupervisores(string searchText)
    {
        int tipoFiltro = 1;
        var responseHttp = await repositorio.Get<List<Operario>>($"api/Operarios/buscar/{searchText}");//?tipoFiltro=" + tipoFiltro);
        return responseHttp.Response;
    }

    private async Task<IEnumerable<Operario>> BuscarOperarios(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Operario>>($"api/Operarios/buscar/{searchText}");
        return responseHttp.Response;
    }

    //private void Responder(RespuestaDetalleAuditoria respuestaDetalleAuditoria)
    //{
    //    respuestasAuditoria.Add(new DetalleAuditoria()
    //    {
    //        PuntoAuditoriaID = respuestaDetalleAuditoria.PuntoAuditoriaID,
    //        RespuestaID = respuestaDetalleAuditoria.ID
    //    });
    //    claseColor = respuestaDetalleAuditoria.ClaseHtml;
    //}

    private async Task OnDataAnnonationsValidated()
    {
        DateTime fecha = DateTime.Now;

        auditoria.Fecha = fecha;
        auditoria.Hora = fecha.Hour.ToString().PadLeft(2, '0') + ":" + fecha.Minute.ToString().PadLeft(2, '0');
        auditoria.Mes = fecha.Month;
        auditoria.Anio = fecha.Year;

        if (auditoria.DetallesAuditoria == null)
        {
            auditoria.DetallesAuditoria = new List<DetalleAuditoria>();
        }

        foreach (var detalle in ListadoDetallesAuditoria)
        {
            if(auditoria.DetallesAuditoria.Where(x => x.PuntoAuditoriaID == detalle.PuntoAuditoriaID).FirstOrDefault() == null)
            {
                auditoria.DetallesAuditoria.Add(new DetalleAuditoria()
                {
                    ID = detalle.ID,
                    PuntoAuditoriaID = detalle.PuntoAuditoriaID,
                    PuntoAuditoria = null,
                    RespuestaID = detalle.RespuestaID,
                    Observaciones = detalle.Observaciones
                });
            }
        }

        await OnValidSubmit.InvokeAsync(null);
    }

    private async Task GuardarAuditoria()
    {
        bool error = false;
        mensajesError = new List<string>();

        if (string.IsNullOrEmpty(NroDeOrden.Trim()))
        {
            error = true;
            mensajesError.Add("El Numero de Orden es dato requerido");
        }
        auditoria.NroOrden = NroDeOrden;

        if (string.IsNullOrEmpty(NroDePieza.Trim()))
        {
            error = true;
            mensajesError.Add("El Numero de Pieza es dato requerido");
        }
        auditoria.NroPieza = NroDePieza;

        if (AreaID == 0)
        {
            error = true;
            mensajesError.Add("Es Nesesario que Seleccione un/a Area/Linea para Poder Continuar");
        }

        if (ProcesoID == 0)
        {
            error = true;
            mensajesError.Add("Es Nesesario que Seleccione un Proceso para Poder Continuar");
        }

        if (MaquinaSeleccionada.Count < 1)
        {
            error = true;
            mensajesError.Add("Es Nesesario que Seleccione una Maquina para Poder Continuar");
        }
        else
        {
            auditoria.MaquinaID = MaquinaSeleccionada.Select(x => x.ID).FirstOrDefault();
        }

        if (OperarioSeleccionado.Count < 1)
        {
            error = true;
            mensajesError.Add("Es Nesesario que Seleccione un Operario para Poder Continuar");
        }
        else
        {
            auditoria.OperarioID = OperarioSeleccionado.Select(x => x.ID).FirstOrDefault();
        }

        if (SupervisorSeleccionado.Count < 1)
        {
            error = true;
            mensajesError.Add("Es Nesesario que Seleccione un Supervisor para Poder Continuar");
        }
        else
        {
            auditoria.SupervisorID = SupervisorSeleccionado.Select(x => x.ID).FirstOrDefault();
        }

        DateTime fecha = DateTime.Now;

        auditoria.Fecha = fecha;
        auditoria.Hora = fecha.Hour.ToString().PadLeft(2, '0') + ":" + fecha.Minute.ToString().PadLeft(2, '0');
        auditoria.Mes = fecha.Month;
        auditoria.Anio = fecha.Year;

        //auditoria.DetallesAuditoria = ListadoDetallesAuditoria;

        foreach (var detalle in ListadoDetallesAuditoria)
        {
            if (detalle.RespuestaID == 2 && (detalle.Observaciones == null || detalle.Observaciones.Count < 1))
            {
                error = true;
                mensajesError.Add("El Punto: " + detalle.PuntoAuditoria.Descripcion + ", tiene como Respuesta  No, por lo que debe tener una Observacion Contemplada o No Contemplada");
            }
        }

        if (!error)
        {
            Titulo = "¿Esta seguro de guardar esta auditoria?";
            Mostrar = true;
        }
        else
        {
            TituloErrores = "Por favor revise la Auditoria y corriga los siguientes Errores";
            MostrarErrores = true;
        }
    }

    private async Task CerrarConfirmacion()
    {
        Titulo = "";
        Mostrar = false;
    }

    private async Task CerrarErrores()
    {
        TituloErrores = "";
        MostrarErrores = false;
    }

}
