@page "/auditorias"
@inject IRepositorio repositorio
@attribute [Authorize]
@inject HttpClientConToken Http
@*@inject IMostrarMensajes mostrarMensajes*@

<div class="form-group">
    <a class="btn btn-info" href="auditorias/crear">Nueva Auditoria</a>
</div>

<ListadoGenerico Listado="Auditorias">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nro de Orden</th>
                    <th>Nro de Pieza</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Auditorias)
                {
                    <tr>
                        <td>
                            <a href="Auditorias/@item.ID" class="btn btn-success"><ion-icon name="folder-open"></ion-icon></a>
                            <button @onclick="@(() => BorrarAuditoria(item))" class="btn btn-danger"><ion-icon name="trash"></ion-icon></button>
                        </td>
                        <td>@item.NroOrden</td>
                        <td>@item.NroPieza</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

<Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada"
            PaginasTotales="paginasTotales"></Paginacion>

<Confirmacion MostrarConfirmacion="Mostrar"
              Titulo="@Titulo"
              onCancel="CerrarConfirmacion"
              onConfirm="@(() => ConfirmacionBorrarAuditoria(Auditoria))">
    <ChildContent>
        <div class="form-group">
            <div class="row">
                <div class="col-md-6">
                    <label>Nro de Orden:</label>
                    <div>
                        <input readonly class="form-control" value="@Auditoria.NroOrden" />
                    </div>
                </div>
                <div class="col-md-6">
                    <label>Nro de Pieza:</label>
                    <div>
                        <input readonly class="form-control" value="@Auditoria.NroPieza" />
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label>Areas:</label>
            <div>
                <input readonly class="form-control" value="@Auditoria.Maquina.Area.Descripcion" />
            </div>
        </div>

        <div class="form-group">
            <label>Maquinas:</label>
            <div>
                <input readonly class="form-control" value="@Auditoria.Maquina.Descripcion" />
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-sm-6">
                    <label>Operario:</label>
                    <div>
                        <input readonly class="form-control" value="@Auditoria.Operario.ApellidoYNombre" />
                    </div>
                </div>
                <div class="col-sm-6">
                    <label>Supervisores:</label>
                    <div>
                        <input readonly class="form-control" value="@Auditoria.Supervisor.ApellidoYNombre" />
                    </div>
                </div>
            </div>
        </div>
    </ChildContent>
</Confirmacion>

@code {
    public List<Auditoria> Auditorias { get; set; }
    private Auditoria Auditoria = new Auditoria();
    private int paginaActual = 1;
    private int paginasTotales;
    private bool Mostrar = false;
    private string Titulo = "";

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await Cargar();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    private async Task Cargar(int pagina = 1)
    {
        var responseHttp = await repositorio.Get<List<Auditoria>>($"api/Auditorias?pagina={pagina}");
        if (!responseHttp.Error)
        {
            Auditorias = responseHttp.Response;
            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }

    private async Task CerrarConfirmacion()
    {
        Auditoria = null;
        Titulo = "";
        Mostrar = false;
    }

    private async Task BorrarAuditoria(Auditoria auditoria)
    {
        Titulo = "Esta seguro de eliminar esta Auditoria?";
        Auditoria = auditoria;
        Mostrar = true;
    }

    async void ConfirmacionBorrarAuditoria(Auditoria auditoria)
    {
        var responseHttp = await repositorio.Delete($"api/Auditorias/{auditoria.ID}");
        if (!responseHttp.Error)
        {
            await CerrarConfirmacion();
            await Cargar();
        }
        else
        {
            await Cargar();
        }
    }
}

