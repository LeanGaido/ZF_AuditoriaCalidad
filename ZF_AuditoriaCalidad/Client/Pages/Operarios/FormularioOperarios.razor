@inject IRepositorio repositorio

<EditForm Model="operario">
    <DataAnnotationsValidator />

    <Confirmacion MostrarConfirmacion="MostrarErrores"
                  Titulo="@TituloErrores"
                  onCancel="CerrarErrores"
                  onConfirm="CerrarErrores"
                  TextoBotonConfirmar="Revisar">
        <ChildContent>
            @if (mensajesError.Count > 0)
            {
                <ul class="list-group">
                    @foreach (var error in mensajesError)
                    {
                        <li class="list-group-item list-group-item-danger"><b>@error</b></li>
                    }
                </ul>
            }
        </ChildContent>
    </Confirmacion>

    <div class="form-group">
        <label>Legajo:</label>
        <div>
            <InputText class="form-control" @bind-Value="@operario.Legajo" />
            <ValidationMessage For="@(() => operario.Legajo)" />
        </div>
    </div>

    <div class="form-group">
        <label>Nombre:</label>
        <div>
            <InputText class="form-control" @bind-Value="@operario.Nombre" />
            <ValidationMessage For="@(() => operario.Nombre)" />
        </div>
    </div>
    <div class="form-group">
        <label>Apellido:</label>
        <div>
            <InputText class="form-control" @bind-Value="@operario.Apellido" />
            <ValidationMessage For="@(() => operario.Apellido)" />
        </div>
    </div>
    <div class="form-group">
        <label>Auditor:</label>
        <div>
            <InputCheckbox @bind-Value="@operario.Auditor" />
            <ValidationMessage For="@(() => operario.Auditor)" />
        </div>
    </div>
    @if (operario.Auditor)
    {
        <div class="form-group">
            <label>Z:</label>
            <div>
                <InputText class="form-control" @bind-Value="@operario.Z" />
                <ValidationMessage For="@(() => operario.Z)" />
            </div>
        </div>
    }
    <div class="form-group">
        <label>Telefono:</label>
        <div>
            <InputText class="form-control" @bind-Value="@operario.Telefono" />
            <ValidationMessage For="@(() => operario.Telefono)" />
        </div>
    </div>
    <div class="form-group">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="@operario.Email" />
            <ValidationMessage For="@(() => operario.Email)" />
        </div>
    </div>
    <a @onclick="@(() => Guardar())" class="btn btn-success">Guardar</a>
</EditForm>

<Confirmacion MostrarConfirmacion="Mostrar"
              Titulo="@Titulo"
              onCancel="CerrarConfirmacion"
              onConfirm="OnDataAnnonationsValidated">
    <ChildContent>
        <div class="form-group">
            <label>Legajo:</label>
            <div>
                <input type="text" readonly class="form-control" value="@operario.Legajo" />
            </div>
        </div>
        <div class="form-group">
            <label>Nombre:</label>
            <div>
                <input type="text" readonly class="form-control" value="@operario.Nombre" />
            </div>
        </div>
        <div class="form-group">
            <label>Apellido:</label>
            <div>
                <input type="text" readonly class="form-control" value="@operario.Apellido" />
            </div>
        </div>
        <div class="form-group">
            <label>Auditor:</label>
            <div>
                @if (operario.Auditor)
                {
                    <span>Si</span>
                }
                else
                {
                    <span>No</span>
                }
            </div>
        </div>
        @if (operario.Auditor)
        {
            <div class="form-group">
                <label>Z:</label>
                <div>
                    <input type="text" readonly class="form-control" value="@operario.Z" />
                </div>
            </div>
        }
    </ChildContent>
</Confirmacion>
@code {
    [Parameter] public Operario operario { get; set; } = new Operario();
    [Parameter] public EventCallback OnValidSubmit { get; set; }


    private bool Mostrar = false, MostrarErrores = false;
    private string Titulo = "", TituloErrores = "";
    public List<string> mensajesError = new List<string>();

    protected override void OnInitialized()
    {

    }

    private async Task OnDataAnnonationsValidated()
    {
        await OnValidSubmit.InvokeAsync(null);
    }

    private async Task Guardar()
    {
        bool error = false;
        mensajesError = new List<string>();

        if (string.IsNullOrEmpty(operario.Legajo.Trim()))
        {
            error = true;
            mensajesError.Add("El Legajo no puede estar vacio");
        }

        if (string.IsNullOrEmpty(operario.Nombre.Trim()))
        {
            error = true;
            mensajesError.Add("El Nombre no puede estar vacio");
        }

        //if (string.IsNullOrEmpty(operario.Apellido.Trim()))
        //{
        //    error = true;
        //    mensajesError.Add("El Nombre no puede estar vacio");
        //}

        if (operario.Auditor)
        {
            if (string.IsNullOrEmpty(operario.Z.Trim()))
            {
                error = true;
                mensajesError.Add("El Z del Operario no puede estar vacio");
            }
        }

        if (!error)
        {
            Titulo = "¿Esta seguro de guardar los cambios?";
            Mostrar = true;
        }
        else
        {
            TituloErrores = "Por favor revise el Formulario y corriga los siguientes Errores";
            MostrarErrores = true;
        }
    }

    private async Task CerrarConfirmacion()
    {
        Titulo = "";
        Mostrar = false;
    }

    private async Task CerrarErrores()
    {
        TituloErrores = "";
        MostrarErrores = false;
    }
}
