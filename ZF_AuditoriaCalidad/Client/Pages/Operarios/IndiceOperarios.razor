@page "/operarios"
@inject IRepositorio repositorio
@attribute [Authorize]
@inject HttpClientConToken Http

<nav aria-label="breadcrumb">
    <ol class="breadcrumb" style="background-color: #047cc4;">
        <li class="breadcrumb-item active" aria-current="page" style="color:white"><h4 style="margin-bottom: 0;">Operarios</h4></li>
    </ol>
</nav>

<div class="">
    <div class="row">
        <div class="form-group col-md-3">
            <label for="titulo" class="">Legajo</label>
            <input @bind-value="Legajo" @bind-value:event="oninput"
                   @onkeypress="@((KeyboardEventArgs e) => EnterKeyPress(e))"
                   type="number" class="form-control" id="Legajo" placeholder="Legajo" />
        </div>
        <div class="form-group col-md-3">
            <label for="titulo" class="">Nombre</label>
            <input @bind-value="Nombre" @bind-value:event="oninput"
                   @onkeypress="@((KeyboardEventArgs e) => EnterKeyPress(e))"
                   type="text" class="form-control" id="Nombre" placeholder="Nombre" />
        </div>
        <div class="form-group col-md-2">
            <label for="titulo" class="">Auditor</label>
            <br />
            <input type="checkbox" @bind-value="Auditor"
                   @bind-value:event="oninput"
                   @onchange="@(() => Cargar())" />
        </div>
        <div class="form-group col-md-2">
            <label for="titulo" class="">Supervisor</label>
            <br />
            <input type="checkbox" @bind-value="Supervisor"
                   @bind-value:event="oninput"
                   @onchange="@(() => Cargar())" />
        </div>
        <div class="form-group col-md-2">
            <label for="titulo" class="">De Baja</label>
            <br />
            <input type="checkbox" @bind-value="Bajas"
                   @bind-value:event="oninput"
                   @onchange="@(() => Cargar())" />
        </div>
    </div>

    @*<button type="button" class="btn btn-danger mb-2" @onclick="LimpiarOnClick">Limpiar</button>*@
</div>

<ListadoGenerico Listado="Operarios">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Z</th>
                    <th>Legajo</th>
                    <th>Apellido y Nombre</th>
                    <th>Telefono</th>
                    <td>Email</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Operarios)
                {
                    <tr>
                        <td>
                            @*<a href="Auditorias/@item.ID" class="btn btn-success"><ion-icon name="folder-open"></ion-icon></a>*@
                            <AuthorizeView Roles="Administrador">
                                <a href="Operarios/editar/@item.ID" class="btn btn-success"><ion-icon name="create"></ion-icon></a>
                                @if (!Bajas)
                                {
                                    <button @onclick="@(() => BorrarOperario(item))" class="btn btn-danger"><ion-icon name="trash"></ion-icon></button>
                                }
                                else
                                {
                                    <button @onclick="@(() => ActivarOperario(item))" class="btn btn-info"><ion-icon name="add-outline"></ion-icon></button>
                                }
                            </AuthorizeView>
                        </td>
                        <td>@item.Z</td>
                        <td>@item.Legajo</td>
                        <td>@item.ApellidoYNombre</td>
                        <td>@item.Telefono</td>
                        <td>@item.Email</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

<Confirmacion MostrarConfirmacion="Mostrar"
              Titulo="@Titulo"
              onCancel="@(() => CerrarConfirmacion())"
              onConfirm="@(() => ConfirmacionBorrarOperario(Operario))">
    <ChildContent>
        <div class="form-group">
            <label>Apellido y Nombre:</label>
            <div>
                <input readonly class="form-control" value="@Operario.ID" />
            </div>
        </div>
        <div class="form-group">
            <label>Apellido y Nombre:</label>
            <div>
                <input readonly class="form-control" value="@Operario.ApellidoYNombre" />
            </div>
        </div>

        <div class="form-group">
            <label>Telefono:</label>
            <div>
                <input readonly class="form-control" value="@Operario.Telefono" />
            </div>
        </div>

        <div class="form-group">
            <label>Email:</label>
            <div>
                <input readonly class="form-control" value="@Operario.Email" />
            </div>
        </div>
    </ChildContent>
</Confirmacion>

@code {
    public List<Operario> Operarios { get; set; }
    private Operario Operario = new Operario();

    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>();
    private bool Mostrar = false, Auditor = false, Supervisor = false, Bajas = false;
    private string Titulo = "", Legajo = "", Nombre = "", Apellido = "";
    private int operarioId = 0;

    private async Task EnterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Cargar();
        }
    }

    private string GenerarQueryStrings()
    {
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["Legajo"] = Legajo;
        queryStringsDict["Nombre"] = Nombre;
        queryStringsDict["Apellido"] = Apellido;
        queryStringsDict["Auditor"] = Auditor.ToString();
        queryStringsDict["Supervisor"] = Supervisor.ToString();
        queryStringsDict["Bajas"] = Bajas.ToString();

        var valoresPorDefecto = new List<string>() { "", "0" };

        // generoid=7&titulo=spider ...

        return string.Join("&", queryStringsDict
            .Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task Cargar(int pagina = 1)
    {
        var queryStrings = GenerarQueryStrings();
        var responseHttp = await repositorio.Get<List<Operario>>($"api/operarios?" + queryStrings);
        if (!responseHttp.Error)
        {
            Operarios = responseHttp.Response;
            //var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            //paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await Cargar();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task CerrarConfirmacion()
    {
        Mostrar = false;
        Operario = null;
        Titulo = "";
    }

    private async Task BorrarOperario(Operario operario)
    {
        Titulo = "Esta seguro de eliminar este Operario?";
        Operario = operario;
        Mostrar = true;
    }

    async void ConfirmacionBorrarOperario(Operario operario)
    {
        if (Operario != null)
        {
            HttpResponseWrapper<object> responseHttp = null;
            if (Bajas)
            {
                responseHttp = await repositorio.Post<Operario>("api/Operarios", Operario);
            }
            else
            {
                responseHttp = await repositorio.Delete($"api/operarios/{Operario.ID}");
            }
            if (!responseHttp.Error)
            {
                Mostrar = false;
                Operario = null;
                Titulo = "";
                await CerrarConfirmacion();
                await Cargar();
            }
            else
            {
                await Cargar();
            }
        }
        else
        {
            Mostrar = false;
            Operario = null;
            Titulo = "";
            await CerrarConfirmacion();
            await Cargar();
        }
    }

    private async Task ActivarOperario(Operario operario)
    {
        Titulo = "Esta seguro de activar este Operario?";
        Operario = operario;
        Mostrar = true;
    }
}
