@page "/maquinas"
@inject IRepositorio repositorio
@attribute [Authorize]
@inject HttpClientConToken Http

<nav aria-label="breadcrumb">
    <ol class="breadcrumb" style="background-color: #047cc4;">
        <li class="breadcrumb-item active" aria-current="page" style="color:white"><h4 style="margin-bottom: 0;">Maquinas</h4></li>
    </ol>
</nav>

<div class="">
    <div class="row">
        <div class="form-group col-md-3">
            <label for="titulo" class="">Nro De Maquina</label>
            <input @bind-value="Descripcion" @bind-value:event="oninput"
                   @onkeypress="@((KeyboardEventArgs e) => DescripcionKeyPress(e))"
                   type="number" class="form-control" id="Descripcion" placeholder="Nro De Maquina" />
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-3">
            <label for="titulo">Area/Linea</label>
            <select class="form-control" value="@AreaID" @onchange="ActualizarProcesos">
                <option value="0">--Seleccione una Area--</option>
                @foreach (var item in ListadoAreas)
                {
                    <option value="@item.ID">@item.Descripcion</option>
                }
            </select>
        </div>
        <div class="form-group col-md-3">
            <label for="titulo">Proceso</label>
            <select class="form-control" @bind="ProcesoID">
                <option value="0">--Seleccione un Proceso--</option>
                @foreach (var item in ListadoProcesos)
                {
                    <option value="@item.ID">@item.Descripcion</option>
                }
            </select>
        </div>
        <div class="form-group col-md-2"></div>
        <div class="form-group col-md-2"></div>
        <div class="form-group col-md-2">
            <button type="button" class="btn btn-primary mb-2 mx-sm-3" @onclick="@(() => Cargar())">Filtrar</button>
        </div>
    </div>

    @*<button type="button" class="btn btn-danger mb-2" @onclick="LimpiarOnClick">Limpiar</button>*@
</div>

<ListadoGenerico Listado="Maquinas">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Area</th>
                    <th>Proceso</th>
                    <td>Maquina</td>
                    <th>Veces Auditadas</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Maquinas)
                {
                    <tr>
                        <td>
                            @*<a href="Auditorias/@item.ID" class="btn btn-success"><ion-icon name="folder-open"></ion-icon></a>*@
                            <AuthorizeView Roles="Administrador">
                                <button @onclick="@(() => BorrarMaquina(item))" class="btn btn-danger"><ion-icon name="trash"></ion-icon></button>
                            </AuthorizeView>
                        </td>
                        <td>@item.Proceso.Area.Descripcion</td>
                        <td>@item.Proceso.Descripcion</td>
                        <td>@item.Descripcion</td>
                        <td>@item.CantDeVecesAuditada</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

<Confirmacion MostrarConfirmacion="Mostrar"
              Titulo="@Titulo"
              onCancel="CerrarConfirmacion"
              onConfirm="@(() => ConfirmacionBorrarMaquina(Maquina))">
    <ChildContent>
        <div class="form-group">
            <label>Area:</label>
            <div>
                <input readonly class="form-control" value="@Maquina.Proceso.Area.Descripcion" />
            </div>
        </div>

        <div class="form-group">
            <label>Proceso:</label>
            <div>
                <input readonly class="form-control" value="@Maquina.Proceso.Descripcion" />
            </div>
        </div>

        <div class="form-group">
            <label>Maquina:</label>
            <div>
                <input readonly class="form-control" value="@Maquina.Descripcion" />
            </div>
        </div>
    </ChildContent>
</Confirmacion>

@code {
    public List<Maquina> Maquinas { get; set; }
    private Maquina Maquina = new Maquina();

    private bool Mostrar = false;
    private string Titulo = "";

    #region Filtros y Busqueda
    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>();
    public string Descripcion = "";
    public int? AreaID = 0;
    public int? ProcesoID = 0;

    [Parameter] public List<Area> ListadoAreas { get; set; } = new List<Area>();

    [Parameter] public List<Proceso> ListadoProcesos { get; set; } = new List<Proceso>();

    private async Task DescripcionKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Cargar();
        }
    }

    private async Task ActualizarProcesos(ChangeEventArgs countryEvent)
    {
        AreaID = int.Parse(countryEvent.Value.ToString());
        var responseHttpProcesos = await repositorio.Get<List<Proceso>>($"api/Procesos/{AreaID.Value}");
        ListadoProcesos = responseHttpProcesos.Response;
        //ProcesoID = (ListadoProcesos.FirstOrDefault() != null) ? ListadoProcesos.First().ID : 0;
    }

    private string GenerarQueryStrings()
    {
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["Descripcion"] = Descripcion;
        queryStringsDict["AreaID"] = AreaID.ToString();
        queryStringsDict["ProcesoID"] = ProcesoID.ToString();

        var valoresPorDefecto = new List<string>() { "false", "", "0" };

        // generoid=7&titulo=spider ...

        return string.Join("&", queryStringsDict
            .Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task Cargar(int pagina = 1)
    {
        var queryStrings = GenerarQueryStrings();
        var responseHttp = await repositorio.Get<List<Maquina>>($"api/Maquinas?" + queryStrings);
        if (!responseHttp.Error)
        {
            Maquinas = responseHttp.Response;
            //var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            //paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }
    #endregion

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var responseHttpAreas = await repositorio.Get<List<Area>>("api/Areas/");
            ListadoAreas = responseHttpAreas.Response;

            await Cargar();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task CerrarConfirmacion()
    {
        Maquina = null;
        Titulo = "";
        Mostrar = false;
    }

    private async Task BorrarMaquina(Maquina maquina)
    {
        Titulo = "Esta seguro de eliminar esta Maquina?";
        Maquina = maquina;
        Mostrar = true;
    }

    async void ConfirmacionBorrarMaquina(Maquina maquina)
    {
        if (maquina != null)
        {
            var responseHttp = await repositorio.Delete($"api/Maquinas/{maquina.ID}");
            if (!responseHttp.Error)
            {
                await CerrarConfirmacion();
                await Cargar();
            }
            else
            {
                await Cargar();
            }
        }
        else
        {
            await CerrarConfirmacion();
            await Cargar();
        }
    }
}
